from django.core.management.base import BaseCommand, CommandError
import requests
from django.utils.dateparse import parse_date
from vulnapp.models import ExploitedVulnerability, ScanStatus
import json

class Command(BaseCommand):
    help = 'Fetches known exploited vulnerabilities and stores them in the database'

    def handle(self, *args, **options):
        scan_details = {
            'total': 0,
            'added': 0,
            'updated': 0,
        }

        try:
            url = 'https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json'
            response = requests.get(url)
            
            if response.status_code != 200:
                ScanStatus.objects.create(
                    scan_type='CISA Known Exploited',
                    status='error',
                    error_message=f'HTTP error {response.status_code}',
                )
                raise CommandError('Error fetching vulnerabilities data')

            data = response.json()
            scan_details['total'] = len(data['vulnerabilities'])
            
            for vuln in data['vulnerabilities']:
                obj, created = ExploitedVulnerability.objects.update_or_create(
                    cve_id=vuln['cveID'],
                    defaults={
                        'vendor_project': vuln['vendorProject'],
                        'product': vuln['product'],
                        'vulnerability_name': vuln['vulnerabilityName'],
                        'date_added': parse_date(vuln['dateAdded']),
                        'short_description': vuln['shortDescription'],
                        'required_action': vuln['requiredAction'],
                        'due_date': parse_date(vuln['dueDate']),
                        'known_ransomware_campaign_use': vuln['knownRansomwareCampaignUse'],
                    }
                )
                if created:
                    scan_details['added'] += 1
                    self.stdout.write(self.style.SUCCESS(f'Successfully added vulnerability {obj.cve_id}'))
                else:
                    scan_details['updated'] += 1
                    self.stdout.write(self.style.SUCCESS(f'Updated vulnerability {obj.cve_id}'))

            # Log scan completion with details
            ScanStatus.objects.create(
                scan_type='CISA Known Exploited',
                status='success',
                details=json.dumps(scan_details),
            )

        except Exception as e:
            ScanStatus.objects.create(
                scan_type='CISA Known Exploited',
                status='error',
                error_message=str(e),
            )
            raise CommandError(f'An error occurred: {str(e)}')
